Chapter 01. 뭐든지 합치면 좋지 않을까? Hybird 가능할까?

기존에 Contents-based(컨텐츠 기반)과 Collaborative(협업기반)을 학습하였습니다.
컨텐츠 기반은 다른 User에 의존하지 않고 새로운 아이템을 추천할 수 있습니다. 하지만, 비슷한 아이템 위주로 추천을 해주며, 명시적인 특징만 활용하기 때문에 딥한 정보를 얻어내기 어렵습니다.
반면, 협업필터링은 집단 지성을 활용하기에 품질이 높아지며, 숨어있는 특징들을 활용하기 때문에 폭넓은 추천을 할 수 있습니다. 무엇보다도, 데이터가 쌓일 수록, 추천 품질은 올라갑니다.
하지만, cold-start 문제가 있고, 과거 데이터에 매우 의존적이기 때문에, 데이터가 부족한 아이템이나 사용자에게 추천 품질은 매우 떨어집니다.

위 두가지 기반의 알고리즘은 데이터셋에 따라 성능이 달라집니다. 또한, 특정 데이터셋에서는 확실한 성능을 보여줄 때도 있으나, 아닌 경우도 있습니다.
그래서 여러 가지의 알고리즘을 합쳐서 해봅니다.

하이브리드 알고리즘의 대표적인 예로는 간단한 하이브리드 방법입니다.
여러 모델의 추천 결과를 하나로 앙상블 하는 방법입니다. (이때, 각각의 모델을 어떻게 가중치를 부여하는지가 핵심입니다)
그외에도, 믹스(모두), 스위치(선택), feature combination(특징을 모두 조합), meta-level(앞선 결과가 다음 모델에 영향을 주는 모델) 등이 있습니다.

하지만, 하이브리드는 항상 좋지 못합니다. 단일 알고리즘을 쓸때보다 못할 때가 있습니다. 또한, 우리는 0점짜리 알고리즘은 100점으로 만들기위해 하이브리드를 쓰지 않습니다.
단순히 5점이라도 올리기 위해 하이브리드를 사용합니다.

Chapter 02. Context-Aware 추천시스템이란?
지금까지 추천 시스템은 사용자와 아이템이 제공한 데이터만 활용했습니다. 하지만, 데이터가 많이 부족하기 때문에, 유저가 흘린 힌트(댓글, 상품평 등)을 찾습니다.
이러한 데이터로 유저와 아이템 행렬을 만듭니다. 또한, 유저와 아이템 간의 관계와 특징을 활용하여 추천합니다.

Context는 맥락입니다.
유저의 상황을 이해하는 것은 곧 맥락을 이해하는 것입니다. 유저와 아이템은 관계가 있지만, 인과/상호관계는 없을 수 있기 때문에 설명하지 않습니다.
이로써, Context-Aware 추천 시스템은 맥락(유저의 상황)을 이해한 추천 시스템입니다. 단순한 상호관계만 파악하는 것이 아니라 상황 정보도 포함하여 추천합니다.
cf) Context와 Contents는 다릅니다.

Context-Aware 추천시스템의 대표적인 예시입니다.
뉴스 추천을 예를 들어봅니다. 기존에는 유저의 성향과 뉴스 컨텐츠의 유사도 등을 판단하여 추천을 합니다.
반면, 맥락 기반의 추천 시스템에서는 유저가 월요일(시간)에 뉴스를 읽는다면, 한 주의 날씨 등 한주를 시작할 때 관심을 가질만한 내용을 추천합니다.

Model Structure에서 기존 추천 시스템은 유저와 아이템을 기반으로 하지만, 맥락 기반에서는 문맥이 추가되어 평가를 합니다.

Context-Aware Recommendation System 정리해봅니다.
다양한 상황의 많은 context 정보를 활용합니다. 주로, 시간, 장소 등 정보가 활용되고 다양한 메타 정보들도 활용합니다.
context정보를 얻는 방법은 다양합니다. 예를 들어, 접속한 기기, 평점을 준 이벤트 정보, 날씨 정보 등입니다.


Chapter 03. Contextual pre-filtering & Contextual Post-filtering

추천 시스템에서 Contextual information의 대표적인 사례는 spotify music 이다.
contextual factor는 explicit 혹은 implicit 하다. 또한, 시간의 흐름에 따라 변할수도(dynamic) 그대로(static)할 수 있다.

contextual information을 적용하는 경우는 3가지 정도가 있다.
첫 번째로, contextual pre-filtering. 처음 데이터를 filtering. context 정보를 기준으로 user 혹은 item으로 나눌 수 있다.
두 번째로, contextual post-filtering. user, item, contextual information 등 다양한 features로 모델링을 진행한다. 모델의 추천 결과에 context 정보를 얹어 filtering하는 기법이다.
마지막으로, contextual modeling. context 정보 자체를 모델링에 활용하는 기법이다. complex한 방법으로 머신러닝 등 활용이 가능하다.


Chapter 04. LARS : Location-Aware Recommender System.
LARS : A Location-Aware Recommender System.
추천을 하기 위해 위치 기반 정보를 활용한다.
ex) 대한민국 내 각 지역별 드라마 선호도 설문조사 결과가 있습니다.
     대장금  허준  징비록   불멸의이순신
서울  90%   80%   90%     80%
인천  90%   80%   80%     80%
경기  90%   80%   70%     80%
대전  80%   80%   55%     80%
광주  80%   80%   30%     80%
대구  82%   80%   35%     80%
울산  83%   80%   40%     80%
부산  70%   80%   45%     80% 

대부분의 드라마는 지역에 상관 없이 선호도가 높다. 하지만, 드라마 징비록의 경우에는 지역간 편차가 매우 크다.
상세하게 알아보면, 드라마 징비록의 경우에는 서울, 인천, 경기 등 수도권 섹터에서는 높은 선호도를 보이지만, 광주, 대구, 울산, 부산 등 남부 지방에서는 낮은 선호도를 보이고 있습니다.
이처럼, 지역 혹은 근접 지역 별로 드라마 선호도가 다를 수 있으니, 지역 별로 선호도가 차이가 있을 수 있으니 지역 간 선호도 차이를 알아볼 필요가 있다.

이처럼, 지금까지 배운 추천 알고리즘은 단순하게 사용자와 아이템 기반 추천이지만, LARS는 사용자 USER의 위치도 고려하여 추천하는 알고리즘이다.
